[[./resources/images/logo-long.svg]]

** Brand and Trademark Usage Guidelines

*** Trademark Guidelines

Any use of the GoForge Trademarks other than those permitted in these guidelines must be approved in advance.

In general, we want the word mark "GoForge" and the GoForge Slogan, "Crafting Code, Building Success" when associated therewith, to be used freely to refer to the GoForge programming language and its purpose.

We do not want the word mark "GoForge" to be used:

- to refer to any other command line tool.
- in a way that is misleading or may imply association of unrelated projects, companies, software, documentation, or other resources with the GoForge project.
- in ways that confuse the community as to whether the GoForge command line tool is open source and free to use.

These guidelines exist to ensure that the GoForge command line tool can continue to share its releases under open source licenses while making sure that the GoForge Trademarks are protected as meaningful source identifiers in a way that's consistent with trademark law.

*** License

The GoForge command line tool is licensed under the [[https://www.eclipse.org/legal/epl-2.0/][Eclipse Public License - v 2.0]]. Any use, reproduction or distribution of the program constitutes recipient's acceptance of said license.

*** Nominative Fair Use

GoForge is neither affiliated with, nor endorsed by the Go programming language community or Google.

*** No Implication of Official Status

Use of the name "GoForge" does not imply official status or endorsement by the Go programming language product.

*** Logo

The Go Gopher was originally created by Renee French and is licensed under the [[https://creativecommons.org/licenses/by/4.0/][Creative Commons 4.0 Attribution License]]. Consequently, the GoForge logo is also licensed under the [[https://creativecommons.org/licenses/by/4.0/][Creative Commons 4.0 Attribution License]], which allows you to use, share, and adapt the logo as long as you provide appropriate attribution. However, please note that the GoForge name and slogan are proprietary and owned by goforge.dev. Any use of the GoForge name and slogan must be in accordance with their terms and policies.

** Inspired by

- Mix: a build tool for Elixir that creates, compiles, tests, manages dependencies, and much more.
- Polylith: a framework for architecting composable projects in a variety of languages
- Leiningen: a project automation framework for Clojure
- Cobra: a Go library and command line tool for making CLI apps
- Viper: a Go library for configuration management
- Bazel & Gazelle: An incremental build tool, and a generator for build files for Go projects.
- Maven & Gradle: build automation and project management tools for Java

** Why use GoForge?

- Straightforward way to make composable code in Go.
- See what's going on in a project at a glance.
- Straightforward commands to make and extend a project.
- Straightforward commands to make and version artifacts.
- Plays nicely with Git & GitHub.
- Plays nicely with Cobra.
- Plays nicely with Viper.

** How to use GoForge?

*** To initialize a new project

For v1:
- License options

@todo
#+BEGIN_SRC bash
goforge init www.brain-fuel.co/goforge
#+END_SRC

@todo
#+BEGIN_SRC bash
goforge init github.com/brain-fuel/goforge
#+END_SRC

@todo
#+BEGIN_SRC bash
goforge init www.brain-fuel.co/path/to/coolapp
#+END_SRC

*** To list entities

@todo
#+BEGIN_SRC bash
  goforge list # lists all entities: apps, bases, and components
#+END_SRC

@todo
#+BEGIN_SRC bash
  goforge list apps
#+END_SRC

@todo
#+BEGIN_SRC bash
  goforge list bases
#+END_SRC

@todo
#+BEGIN_SRC bash
  goforge list components
#+END_SRC

*** To create a new entity

For v1:
- Each new component should automatically be added to Git

@v0
#+BEGIN_SRC bash
  goforge new component <component name>
#+END_SRC

@v0
#+BEGIN_SRC bash
  goforge new base <base name>
#+END_SRC

@v0
#+BEGIN_SRC bash
  goforge new app <app name>
# goforge new app --cobra <app name>
#+END_SRC

@todo
#+BEGIN_SRC bash
  goforge new interface <interface file name> --component <component name>
  goforge new interface <interface file name> --base <base name>
#+END_SRC

@v0
#+BEGIN_SRC bash
  goforge new internal <internal file name> --component <component name>
  goforge new internal <internal file name> --base <base name>
#+END_SRC

@todo
#+BEGIN_SRC bash
  goforge new config <config name>
  goforge new config <config name> --app <app name>
#+END_SRC

@todo
#+BEGIN_SRC bash
  goforge new container <container name> --type <container type>
  goforge new container <container name> --template <container template>
#+END_SRC

*** To remove an entity

For v1:
- stop from tracking in Git
- safe remove (default)
- force remove (--force flag)

@v0
#+BEGIN_SRC bash
  goforge rm component <component name>
#+END_SRC

@v0
#+BEGIN_SRC bash
  goforge rm base <base name>
#+END_SRC

@v0
#+BEGIN_SRC bash
  goforge rm app <app name>
#+END_SRC

@todo
#+BEGIN_SRC bash
  goforge rm internal <internal file name> --component <component name>
  goforge rm internal <internal file name> --base <base name>
#+END_SRC

@todo
#+BEGIN_SRC bash
  goforge rm config <config name>
  goforge rm config <config name> --app <app name>
#+END_SRC

@todo
#+BEGIN_SRC bash
  goforge rm container <container name>
  goforge rm container <container name> --type <container type>
#+END_SRC

*** To test an entity

@todo
#+BEGIN_SRC bash
  goforge test # runs all tests
#+END_SRC

@todo
#+BEGIN_SRC bash
  goforge test components
  goforge test component <component name>
#+END_SRC

@todo
#+BEGIN_SRC bash
  goforge test bases
  goforge test base <base name>
#+END_SRC

@todo
#+BEGIN_SRC bash
  goforge test apps
  goforge test app <app name>
#+END_SRC

@todo
Figure out a way to test containers

*** To build an app

@todo
#+BEGIN_SRC bash
  goforge build # builds all apps w/default config
  goforge build <app name> # builds app with default config
  goforge build <app name> --with-config <config name> # builds app with named config
#+END_SRC

** Other/old

*** Show

**** Components
***** All
***** For a particular app
***** For a particular base

**** Bases
***** All
***** For a particular app
***** Using a particular component

**** Apps
***** All
***** Using a particular base
***** Using a particular component

**** Deps
***** All
***** For a particular component
***** For a particular base
***** For a particular app

*** Clean
**** All
**** App

*** Test
**** Component
**** All Components
**** Base
**** All Bases
**** App
**** All Apps

*** Tag

*** Bump
**** Major
**** Minor
**** Patch

*** Release

Build, Test, Tag

**** Major
**** Minor
**** Patch

** TODO

- Make GoForge compatible with GitHub Actions
- Standardize Container Template Form
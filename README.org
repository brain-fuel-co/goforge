* GoForge

** Use

*** License

The GoForge command line tool is licensed under the [Eclipse Public License - v 2.0](https://www.eclipse.org/legal/epl-2.0/). Any use, reproduction or distribution of the program constitutes recipient's acceptance of said license.

*** Nominative Fair Use

Goforge is neither affiliated with, nor endorsed by the Go programming language community or Google.

*** No Implication of Official Status

Use of the name "Goforge" does not imply official status or endorsement by the Go programming language product.

*** Logo

The Go Gopher was originally created by Renee French and is licensed under the [Creative Commons 4.0 Attribution License](https://creativecommons.org/licenses/by/4.0/). Consequently, the GoForge logo is also licensed under the [Creative Commons 4.0 Attribution License](https://creativecommons.org/licenses/by/4.0/), which allows you to use, share, and adapt the logo as long as you provide appropriate attribution. However, please note that the GoForge name and slogan are proprietary and owned by goforge.dev. Any use of the GoForge name and slogan must be in accordance with their terms and policies.

** Inspired by

- Mix: a build tool for Elixir that creates, compiles, tests, manages dependencies, and much more.
- Polylith: a framework for architecting composable projects in a variety of languages
- Leiningen: a project automation framework for Clojure
- Cobra: a Go framework for making CLI apps
- Maven and Gradle: frameworks for making Java apps

** Why use GoForge?

- Straightforward way to make composable code in Go.
- See what's going on in a project at a glance.
- Straightforward commands to make and extend a project.
- Straightforward commands to make and version artifacts.
- Plays nicely with Git & GitHub.
- Plays nicely with Cobra
- Plays nicely with Viper

** How to use GoForge?

```bash
goforge new project <git user account>/<project name>
* OR
goforge new project <website>/<project name>
* OR
goforge new project <website>/<path/to/project name>
```

```bash
goforge new component <component name>
```

```bash
goforge new base <base name>
```

```bash
goforge new app <app name>
* OR
goforge new app --cobra <app name>
```

** Commands

*** Show

**** Components
***** All
***** For a particular app
***** For a particular base

**** Bases
***** All
***** For a particular app
***** Using a particular component

**** Apps
***** All
***** Using a particular base
***** Using a particular component

**** Deps
***** All
***** For a particular component
***** For a particular base
***** For a particular app

*** New

With each new entity, it should be added to Git.

**** Project
**** Component
**** Base
**** App

*** Build
**** App
**** All Apps

*** Clean
**** All
**** App

*** Test
**** Component
**** All Components
**** Base
**** All Bases
**** App
**** All Apps

*** Tag

*** Bump
**** Major
**** Minor
**** Patch

*** Release

Build, Test, Tag

**** Major
**** Minor
**** Patch

** TODO

- Make GoForge compatible with GitHub Actions

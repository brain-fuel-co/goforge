* Symbol
[[resources/images/logo-long.svg]]
* Slogan
Crafting Code, Building Success
* Story
** Starting as a Go developer

Hi, I'm Lysander.

I've been writing code since 1995, but just recently started as a Go developer. I started getting used to the Go ecosystem by doing [[https://gobyexample.com][Go by Example]], and writing some basic command line tools to automate things at work. For putting code together to make small tools. Robert Griesemer, Rob Pike, and Ken Thompson did a lovely job with the language. I love how they made things like gofmt be opinionated because it gets people to stop arguing about minutiae and get started writing idiomatic code. Eventually, I got to the point where I wanted to be able to organize bigger projects, compile code, run tests, manage dependencies, and all the rest of it, and found that, while the Go ecosystem has already developed a nice, widely-adopted solution for dependency management [[https://go.dev/ref/mod][go.mod]], when it comes to organizing bigger projects, seeing the state of things, compiling code, running tests, and having a seamless development process, the ecosystem didn't have a one-stop tool for this sort of thing. 

This is totally understandable: Depending upon the needs of a project and the prior experience of the developers, many individuals and teams rolled their own solutions for different parts of the software-development process. After looking at well over a thousand GitHub repositories to see how they structured their projects, whether or not they had a Makefile (and what it looked like), and on-and-on, I developed some opinions of my own as to how Go projects might best be structured, and some tooling that should save development teams many hours and headaches.

** Structuring a Go Project (inspired by Make, Ant, Maven, Gradle, and Polylith)

*** A Very Bad Idea

From the perspective of the compiler, you technically ought to be able to write one gigantic `main` function and cram all your code into it. Since human beings have to ultimately read the code, this is a very bad idea. Indeed, if we take seriously the words of Hal Abelson, we will concede that there must be a better idea.

*** A Better Idea

#+BEGIN_QUOTE
"Programs must be written for people to read, and only incidentally for machines to execute." (Hal Abelson)
#+END_QUOTE

Ever since complex systems were first developed, folks have had to make systems to tame the complexity. One of the longest lasting contributions to managing complex systems was released in 1977 by Stuart Feldman at Bell Labs. It was called Make. In 1988, it was officially released as a part of the GNU project. Writing a Makefile and using the `make` commands simplified the software development lifecycle by showing how separate pieces of code ought to be combined, giving names to intermediate targets, and exposing a single interface for all the developers' build needs.

You are likely familiar with such tools as Apache Ant, Maven, and Gradle. These tools appeared on the scene later and abstracted away different layers of what would have been written in a Makefile. They have shaped the expectations many developers havein terms of project organization. The idea of having a `lib` directory for libraries or dependencies that are not available via a package manager, and a `src/<main/test>/resources` directory for non-code resources like configuration files are baked into the Maven/Gradle ecosystem. 

Around the same time, Go and Clojure entered the scene. Whereas the exact date that Johannes Staffans invented the Polylith command-line tool is not widely documented (I couldn't find it), it entered the Clojure ecosystem in the late 2010s and does a lovely job of helping developers write modular code by splitting the constituent elements into `components` and `bases`, and thinking about them as lego blocks. Since Go has eschewed inheritance in favor of composition, and since Go has given us the lovely option of making certain packages `internal`, it lends itself very nicely to the lego-like Polylith architecture. Follow this link to learn more about [[https://polylith.gitbook.io/polylith/][Polylith]]

The Idea for GoForge came about as I was pondering the Polylith architecture, Go's `internal` package structure, and general patterns I'd seen whilst perusing thousands of Git repositories containing Go code.

** Development Workflow

*** Project Visualization

*** Managing Dependencies

*** Creating Apps

*** Creating Components and Bases

*** Compiling Code

*** Running Tests

*** Managing Configuration

*** Etc.

* Surprise
* Salient

